# -*- mode: org -*-
* use-package-extras

use-package-extras is an extension for use-package which provides
additional keywords for a simple and cleaner configuration.

#+begin_quote
[!WARNING]
This package is still under development, some keywords may not work as
expected
#+end_quote

This package provides the following extra keywords for ~use-package~:

** :setopt

Similar to :custom, but can also bind plain variables, the form is a
cons-cell where the ~car~ is the variable to bind and the ~cdr~ the value.

This uses the ~setopt~ function, for bind the variables.

#+begin_src emacs-lisp
(use-package test
  :setopt
  (test-variable . 1)
  (another-test-variable . 2))
#+end_src

** :hook+
An enchanted ~:hook~ which supports hooks depths.
The hook depth is provided using the sub-keyword ~:depth~

#+begin_src emacs-lisp
(use-package test
  :hook+
  (:depth 10
    (text-mode . auto-fill-mode)
    (prog-mode . (lambda () (test 1)))
    (a1 b1 c1))
  (:depth 5
    (text-mode . auto-fill-mode)))
#+end_src

Also can work as another ~:hook~:

#+begin_src emacs-lisp
(use-package test
  :hook+
  (a2 b2 c2)
  (text-mode . auto-fill-mode)
  (text-mode . (lambda () (test 2))))
#+end_src

And combine both forms together:

#+begin_src emacs-lisp
(use-package test
  :hook+
  (:depth 10
    (text-mode . auto-fill-mode)
    (prog-mode . (lambda () (test 1)))
    (a1 b1 c1))
  (:depth 5
    (text-mode-2 . auto-fill-mode))
  (:depth -8 my-mode-hook)
  (a2 b2 c2)
  (prog-mode . auto-fill-mode)
  (prog-mode . (lambda () (test 2))))
#+end_src

** :which-key-replacement
A simple way to set your which-key replacement keybindings
The form can be a any of these options:

A cons-cell for ~which-key-add-key-based-replacements~

#+begin_src emacs-lisp
(use-package test
  :which-key-replacement
  ("C-x" . "foo")
  ("C-c" . "bar")
  ...)
#+end_src

A list which specifies a keymap, for
~which-key-add-keymap-based-replacements~

#+begin_src emacs-lisp
(use-package test
  :which-key-replacement
  (:keymap map
           ("C-x" "foo" command-name)
           ("C-c" "bar" command-name)
           ...))
#+end_src

Or a list which specifies a major mode, for
~which-key-add-major-mode-key-based-replacements~

#+begin_src emacs-lisp
(use-package test
  :which-key-replacement
  (:mode major-mode
         ("C-x" . "foo")
         ...))
#+end_src

Any of these forms can be added together in the
~:which-key-replacement~ keyword:

#+begin_src emacs-lisp
(use-package test
  :which-key-replacement
  ("C-x" . "foo")
  ("C-c" . "bar")
  (:keymap map
           ("C-x" "foo" command-name)
           ("C-c" "bar" command-name)
           ("p" "mode-prefix" (prefix-map)))
  (:mode major-mode
         ("C-c" . "zzz")))
#+end_src

** :custom-face*
Like :custom-face but override the face specs.

#+begin_quote
[!NOTE]
In emacs 31 the :custom-face behavior was changed making
impossible to override the face specs, this keyword is intended
for Emacs 31 users.
#+end_quote

#+begin_src emacs-lisp
(use-package test
  :custom-face*
  (test-face ((t :inherit error))))
#+end_src

** :defvar-keymap
Define a new keymap or override an existent one.

The value must be a single list with ~:map~ and a ~keymap~
following the ~key~ and ~definition~, similar to ~defvar-keymap~.

#+begin_src emacs-lisp
(use-package test
  :defvar-keymap
  (:map mode-map
        "C-x foo" #'bar
        "C-x foo2" #'bar2
        ;; you can define multiple in the same list
        :map another-mode-map
        "C-c foo" #'bar
        "C-c foo2" #'bar2))
#+end_src

** :emacs< :emacs<= :emacs= :emacs> :emacs>=
Shorthands for ~:if (<version-*> emacs-version <version>)~, the version
can be number or a string.

# quoted number and quoted string are not accepted
# who would do that? :^)

+ ~:emacs<~
#+begin_src emacs-lisp
(use-package test
  :emacs< 31)
#+end_src

+ ~:emacs<=~
#+begin_src emacs-lisp
(use-package test
  :emacs<= 32)
#+end_src

+ ~:emacs=~
#+begin_src emacs-lisp
(use-package test
  :emacs= "31.0.50")
#+end_src

+ ~:emacs>~
#+begin_src emacs-lisp
(use-package test
  :emacs> 29.1)
#+end_src

+ ~:emacs>=~
#+begin_src emacs-lisp
(use-package test
  :emacs>= "31")
#+end_src

This also have compatibility with other ~use-package~ keywords

#+begin_src emacs-lisp
(use-package test
  :if t
  :emacs< 31)
#+end_src

* Installation and Usage

Currently ~use-package-extras~ is not available in any Package Archive,
but you can install it via ~package-vc-install~:

~M-x package-vc-install RET https://github.com/DevelopmentCool2449/use-package-extras RET~

Alternatively using ~use-package~ ~:vc~ keyword:

#+begin_src emacs-lisp
(use-package use-package-extras
  :ensure t
  :vc ( :url "https://github.com/DevelopmentCool2449/use-package-extras"
        :rev :newest))
#+end_src

After it is already installed and loaded you can add all the keywords
to ~use-package-keywords~ calling ~use-package-extras-add-keywords~
function:

#+begin_src emacs-lisp
(use-package use-package-extras
  :config (use-package-extras-add-keywords))
#+end_src

#+html: <img src="https://raw.githubusercontent.com/DevelopmentCool2449/emacs-svg-badges/main/powered_by_org_mode.svg" align="right" width="10%" alt="Powered by Org Mode">
